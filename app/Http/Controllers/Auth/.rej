*** /dev/null
--- /dev/null
***************
*** 5,14
- use App;
- use Auth;
- use Flash;
- use Lang;
- use Session;
- use Socialite;
- use Storage;
- use URL;
- use App\Jobs\RestoreUser;
- use App\Models\User;
--- 0 -----
***************
*** 16,18
- use App\Http\Controllers\UserController;
- use Illuminate\Http\Request;
- use Illuminate\Support\Facades\Validator;
--- 0 -----
***************
*** 41,43
-     //protected $redirectTo = '/home';
-     protected $maxLoginAttempts = 5;
-     protected $lockoutTime = 1800;
--- 28 -----
+     protected $redirectTo = '/home';
***************
*** 52,141
-         $this->middleware('guest', ['except' => 'logout']);
-         // Limit try to login times.
-         if (App::environment() === 'production') {
-             // $this->middleware('throttle:5,30');
-         }
-     }
- 
-     /**
-     * Determine if the user has too many failed login attempts.
-     *
-     * @param \Illuminate\Http\Request $request
-     * @return bool
-     */
-     protected function hasTooManyLoginAttempts(Request $request) {
-         return $this->limiter()->tooManyAttempts(
-             $this->throttleKey($request), $this->maxLoginAttempts, $this->lockoutTime
-         );
-     }
- 
-     /**
-      * Handle a login request to the application.
-      *
-      * @param  \Illuminate\Http\Request  $request
-      * @return \Illuminate\Http\Response
-      */
-     public function postLogin(Request $request)
-     {
-         // Get number of attempts to login.
-         if ($this->hasTooManyLoginAttempts($request)) {
-             Flash::error(Lang::get('auth.throttle'));
-             return back()->withInput();
-         }
-         // Get request.
-         $username = $request->input('username');
-         $password = $request->input('password');
-         $remeber = $request->input('remember');
-         // Manually validation login request.
-         $this->validate($request, [
-             'username' => 'bail|required|min:5|max:30',
-             'password' => 'bail|required|min:8|max:50|case_diff|numbers|letters',
-             'g-recaptcha-response' => 'sometimes|bail|required|recaptcha',
-         ]);
-         // Determine whether is email or username login.
-         $type = filter_var($username, FILTER_VALIDATE_EMAIL ) ? 'email' : 'username';
-         // Login attempts.
-         if ($type == 'email') {
-             if (Auth::attempt(['email' => $username, 'password' => $password], $request->has('remember'))) {
-                 // Is the user was logoff?
-                 $user = User:: where('email', $username)->first();
-                 if ($user->status == -1) {
-                 	   $user->status= 1; 
-                 }
-                 // update logon ip.
-                 $user->lastip = $request->getClientIp();
-                 $user->save();
-                 Flash::success(Lang::get('global.login_successfully'));
-                 return redirect()->intended();
-             } else {
-                 Flash::error(Lang::get('auth.failed'));
-                 return back()->withInput($request->all());
-             }
-         } else if (Auth::attempt(['username' => $username, 'password' => $password], $request->has('remember'))) {
-             // Is the user was logoff? restore this user.
-             $user = User:: where('username', $username)->first();
-             if ($user->status == -1) {
-                 (new UserController())->restore($user);
-             }
-             // update login ip.
-             $user->lastip = $request->getClientIp();
-             $user->save();
-             Flash::success(Lang::get('global.login_successfully'));
-             return redirect()->intended();
-         } else {
-             Flash::error(Lang::get('auth.failed'));
-             return back()->withInput($request->all());
-         }
-     }
- 
-     /**
-      * Log the user out of the application.
-      *
-      * @return \Illuminate\Http\Response
-      */
-     public function getLogout()
-     {
-         if (Auth::check()) {
-             Auth::logout();
-             Flash::success(Lang::get('global.logout_successfully'));
-         }
-         return redirect(property_exists($this, 'redirectAfterLogout') ? $this->redirectAfterLogout : '/');
--- 37 -----
+         $this->middleware('guest')->except('logout');
